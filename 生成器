#!/usr/bin/python3
#-*-coding:utf-8-*-
生成器表达式 ————》迭代器
生成器是延迟操作，生成的是内存中一段地址空间
<generator object <genexpr> at 0x7f9375c429e8> 
不深入处理内容，所以没有新的内存消耗
在需要的时候命令迭代器生成新的值

1.迭代器协议：对象需要提供next方法，要么返回迭代下一项，要么引起一个Stopteration异常，终止迭代。
2.可迭代对象：实现迭代协议的对象
3.可迭代对象实现迭代协议，Python的内置工具（for循环，sum，min，max等函数）使用迭代器访问对象
with open('/etc/passwd') as f: #文件对象提供迭代器协议
    for line in f:             #for循环使用迭代器协议访问文件
        print line
2.生成器
Python 使用生成器对延迟操作提供支持，所谓延迟操作，是指在需要的时候产生结果，而不是立即产生结果。不产生结果就不消耗新内存
Python有两种不同方式提供生成器：
1.生成器函数：使用yield语句而不是return返回结果。
2.生成器表达式：类似列表推导，生成器按需返回结果的一个对象，结果看着像列表（少了创建的过程）
def gensquares(N):
    for i in range(N):
        yield i ** 2          #生成自然数的平方，无需创建并添加至列表
                              #生成器自动返回对象，
for item in gensquares(5):
    print item,

    
重点：生成器表达式
上面说到“生成器表达式”类似列表推导，详细讲解一下：
列表推导：
    x = [_ for _ in 'str']  #这里每个_ ,都会返回一个仅含一个元素的列表。很费内存。

生成器表达式：                #返回迭代器，不深入处理内容，因此没有新的内存产生。
    x = (_ for _ in 'str')
    print(x)
<generator object <genexpr> at 0x7f9375c429e8>    
