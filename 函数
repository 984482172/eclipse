#!/usr/bin/python3
#函数的本质是赋值运算
#接口函数描述规范
def set_temperature(self, temp):
    """Set the temperature value.   标题

    The value of the temp parameter is stored as a value in
    the class variable temperature. The given value is converted
    into a float value if not yet done.

    :param temp: the temperature value
    :type temp: float
    :return: no value
    :rtype: none
    """

    self.temperature = float(temp)
    return

def get_qdev_by_drive(self, device):
    """
    Get the qdev ID of device by drive name.  内容
    
    :param device: device name
    :type device: str
    :return: the qdev ID
    :rtype: str
    """
    for dev in self.__devices:
        try:
            if isinstance(dev, qdevices.QDevice) and device == dev.params['drive']:
                return dev.params['id']
        except KeyError:
            continue

#函数范例1：
def zzy(a, b):
    print(f"you have {a}")
    print(f"you have {b}")
    print("get a blanket.\n")

print("show:1")
zzy(20, 30)

print("show:2")
a = 10
b = 20

zzy(a, b)

print("show:3")
zzy(10 + 20, 5 + 6)

print("show:4")
zzy(a + 100, b + 1000)

--------------------------------------------------------------------------------------------------------------
#函数范例2：
#使用函数读取文件
from sys import argv

script, input_file = argv

def zzy1(f):         #将文件标记为只读
    print(f.read())

def zzy2(f):         #将读写跳到开头
    f.seek(0)

def zzy3(a, f):      #设定读取文件当前行！！！
    print(a, f.readline())

BL1 = open(input_file)  #定义变量1，把input_file标记为文件

print("First let's print the whole file:\n")
zzy1(BL1)

print("Now let's rewind, kind of like a tape.")
zzy2(BL1)

print("Let's print three lines:")
BL2 = 1             #变量BL2可以一直改变
zzy3(BL2, BL1)

BL2 = BL2 + 1
zzy3(BL2, BL1)

BL2 = BL2 + 1
zzy3(BL2, BL1)

--------------------------------------------------------------------------------------------------------------
#函数范例3：
#函数main中调用main，循环用if终止
import sys
script, encoding, error = sys.argv  #定义系统参数脚本，编码，错误


def main(language_file, encoding, errors):     #函数main3个参数
    line = language_file.readline()             #变量line 读当前行

    if line:                                    #检验变量line的真值，有内容即为真，否则跳过
        print_line(line, encoding, errors)       #调用函数print_line打印
        return main(language_file, encoding, errors) #循环执行main 直到这一行没有内容了


def print_line(line, encoding, errors):                      #函数print_line3个参数读当前行，编码，错误
    next_lang = line.strip()                                   #把每行结尾的\n删掉，字符串1
    raw_bytes = next_lang.encode(encoding, errors = errors)    # 使用.encode来编码字符串，变成原始字符串
    cooked_string = raw_bytes.decode(encoding, errors = errors)  #使用.decode将原始字符串变成，字符串1

    print(raw_bytes, "<===>", cooked_string)                   #原始字符串，根据原始字符串转换的 字符串1


languages = open("languages.txt", encoding = "utf-8")    #定义变量 打开languages.txt,指定编码格式为utf-8

main(languages, encoding, error)

--------------------------------------------------------------------------------------------------------------
#函数范例4：
#定义新变量存放函数返回值
def HS1(started):                                        #这个函数有一个参数
    a = started * 500                                    #之后对这一个参数做改变
    b = a / 1000
    c = b / 100
    return a, b, c                                       #函数返回值

HS1_BL = 10000                                           #函数中的参数
beans, b, c = HS1(HS1_BL)                                #定义新变量存放函数返回值

# remember that this is another way to format a string
print("With a starting point of: {}".format(HS1_BL))     #调用变量
print(f"With a starting point of: {HS1_BL}")
# it's just like with an f"" string
print(f"We'd have {beans} beans, {b} b, and {c} c.")

HS1_BL = HS1_BL / 10                                     #定义变量

print("We can also do that this way:")
formula = HS1(HS1_BL)                                    #定义变量formula =函数
# this is an easy way to apply a list to a format string      
print("We'd have {} beans, {} b, and {} c.".format(*formula)) #通用格式化formula

--------------------------------------------------------------------------------------------------------------
#函数范例5：
#split() 分割符用法
def break_words(stuff):
    """this function will break up words for us."""      #在python解释器中用的
    words1 = stuff.split(' ')
    words2 = stuff.split(' ', 2 )                        # 以空格为分隔符，分隔次数为2
    return words1, words2

stuff = """1 2 3 4 5"""
words1, words2 = break_words(stuff)
print(f"{words1}")
print(f"{words2}")

--------------------------------------------------------------------------------------------------------------
#添加进程锁
import time
import threading

lock = threading.Lock()  # 创建互斥锁
counter = 0  # 计数器


def counter_lock():
    global counter
    if lock.acquire():  # 请求互斥锁，如果被占用，则阻塞，直至获取到锁
        time.sleep(0.2)  # 假装思考、敲键盘需要0.2秒钟
        counter += 1
        print('我是第%d个' % counter)

    lock.release()  # 千万不要忘记释放互斥锁，否则后果很严重


def demo():
    threads = list()
    for i in range(3):  # 假设群里有3人，都喜欢吃苹果
        threads.append(threading.Thread(target=counter_lock))
        threads[-1].start()

    for t in threads:
        t.join()

    print('统计完毕，共有%d人' % counter)


if __name__ == '__main__':
    demo()

