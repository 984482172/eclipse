Create image on NBD server side:
# qemu-img create -f qcow2  -o preallocation=full/falloc test.qcow2 20G
NBD img 创建需要增加preallocation参数，因为NBD 本身不会标记未被使用的元数据，所以当使用qcow2格式映射时，NBD只会读取系统使用的大小，
但写入时因为NBD本身映射为raw格式，所以后面qcow2格式的未被标记的会写入不进去。
full 格式会把所有空间都写入qcow2格式的0
falloc 格式会把所有空间都标记为qcow2格式，但不会真正写入
[root@ibm-p8-garrison-03 zhenyzha-nfs]# du -h full.qcow2 
21G	full.qcow2
[root@ibm-p8-garrison-03 zhenyzha-nfs]# du -h falloc.qcow2 
21G	falloc.qcow2
[root@ibm-p8-garrison-03 zhenyzha-nfs]# du -h guest.qcow2 
2.3G	guest.qcow2

 Create snapshot in client based on the nbd file
# qemu-img create -f qcow2 -F qcow2 sn1.qcow2 -b nbd:host_name_of_server:9000

RHEL7-86439 case error
 Implement TLS support to NBD Build-in Server	
 There are too many errors in the step, causing the case to fail to execute.
 1.No TLS configuration steps
 2.The command line is too simple, there is no explanatory information, 
 and you can't refer to writing the full command line.
 3.Start nbd server in monitor steps command error，parameter error，causes the overall case to fail to execute.
 
 
iscsi 配置
iscsi target:
[root@ibm-p8-garrison-05 ~]# targetcli
/iscsi/iqn.20...19b3e3a0/tpg1> cd /iscsi/
/iscsi> /backstores/fileio/
/backstores/fileio> create lun0.img /home/lun0.img 20G
Created fileio lun0.img with size 21474836480
/backstores/fileio> cd /iscsi/
/iscsi> create iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server
Created target iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server.
Created TPG 1.
Default portal not created, TPGs within a target cannot share ip:port.
/iscsi> cd iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server/
/iscsi/iqn.20...pc64le:server> ls
o- iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server ......................................................... [TPGs: 1]
  o- tpg1 ................................................................................................... [no-gen-acls, no-auth]
    o- acls .............................................................................................................. [ACLs: 0]
    o- luns .............................................................................................................. [LUNs: 0]
    o- portals ........................................................................................................ [Portals: 0]
/iscsi/iqn.20...pc64le:server> tpg1/luns create 
/backstores/fileio/block1    /backstores/fileio/block2    /backstores/fileio/lun0.img  NETBOOT_METHOD.TXT           
RECIPE.TXT                   anaconda-ks.cfg              original-ks.cfg              add_mapped_luns=             
lun=                         storage_object=              
/iscsi/iqn.20...pc64le:server> tpg1/luns create /backstores/fileio/lun0.img 
Created LUN 0.
/iscsi/iqn.20...pc64le:server> cd tpg1/
/iscsi/iqn.20...e:server/tpg1> set attribute authentication=0
Parameter authentication is now '0'.
/iscsi/iqn.20...e:server/tpg1> set attribute demo_mode_write_protect=0
Parameter demo_mode_write_protect is now '0'.
/iscsi/iqn.20...e:server/tpg1> set attribute generate_node_acls=1
Parameter generate_node_acls is now '1'.
/iscsi/iqn.20...pc64le:server> tpg1/
/iscsi/iqn.20...e:server/tpg1> portals/
/iscsi/iqn.20.../tpg1/portals> create 10.16.68.32(如果报错则：delete 0.0.0.0 3260)
Using default IP port 3260
Created network portal 10.16.68.32:3260.
/iscsi/iqn.20.../tpg1/portals> exit 
[root@ibm-p8-garrison-05 ~]# systemctl restart target.service 


iSCSI Initiator:
]# qemu-img info iscsi://10.16.68.32:3260/iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server/0
]# qemu-img create -f qcow2 iscsi://10.16.68.32:3260/iqn.2003-01.org.linux-iscsi.ibm-p8-garrison-05.ppc64le:server/0 20G


mkdir -p /etc/pki/qemu
cd /etc/pki/qemu/

2.14.1 Setup the Certificate Authority

yum -y install gnutls-utils
certtool --generate-privkey > ca-key.pem
[root@ibm-p8-garrison-03 qemu]# cat > ca.info <<EOF
cn = redhat
ca
cert_signing_key
EOF

[root@ibm-p8-garrison-03 qemu]# certtool --generate-self-signed \
--load-privkey ca-key.pem \
--template ca.info \
--outfile ca-cert.pem \

# cat > server-redhat.info <<EOF
organization = redhat
cn = localhost
dns_name = rhts
dns_name = rhts.eng.bos.redhat.com
ip_address = 10.16.67.230
ip_address = 10.16.71.254
ip_address = 2620:52:0:1040:51bb:1c66:13e2:8f66
ip_address = fe80::27f4:6b19:9112:90db
tls_www_server
encryption_key
signing_key
EOF

# certtool --generate-privkey > server-redhat-key.pem
# certtool --generate-certificate \
--load-ca-certificate ca-cert.pem \
--load-ca-privkey ca-key.pem \
--load-privkey server-redhat-key.pem \
--template server-redhat.info \
--outfile server-redhat-cert.pem

# cat > client-redhat.info <<EOF
country = GB
state = London
locality = City Of London
organization = redhat
cn = localhost
tls_www_client
encryption_key
signing_key
EOF

# certtool --generate-privkey > client-redhat-key.pem
# certtool --generate-certificate \
--load-ca-certificate ca-cert.pem \
--load-ca-privkey ca-key.pem \
--load-privkey client-redhat-key.pem \
--template client-redhat.info \
--outfile client-redhat-cert.pem

mv server-redhat-cert.pem server-cert.pem
mv client-redhat-cert.pem client-cert.pem
mv server-redhat-key.pem server-key.pem
mv client-redhat-key.pem client-key.pem

qemu中使用
$QEMU -object tls-creds-x509,id=tls0,dir=/etc/pki/qemu,endpoint=server
$QEMU -object tls-creds-x509,id=tls0,dir=/etc/pki/qemu,endpoint=client
$QEMU -vnc 0.0.0.0:0,tls-creds=tls0
