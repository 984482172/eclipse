#!/usr/bin/python
# -*- coding: UTF-8 -*-
1.'A | B'取符号'|'前面的值
'A | B'.split('|')[0]   取前面一个值

2.在列表[1,2,3,4,5,6,7] 首尾分别添加整形元素7 和 8
a = [1,2,3,4,5,6]
a.insert(0,7)
print(a)
[7, 1, 2, 3, 4, 5, 6]
a.append(8)
print(a)
[7, 1, 2, 3, 4, 5, 6, 8]

3.反转列表[0,1,2,3,4,5,6,7]
a = [1,2,3,4,5,6]
a.reverse()
或者
a[::-1]     #-1为最后一个元素
[8, 6, 5, 4, 3, 2, 1, 7]

3.统计列表中某个值的个数
a = [7,1,2,3,4,5,6,7]
a.count(7)
注意count不区分“True 和 1”  “False 和 0”，会当成一个值统计

4.从列表[1,0,'x','x',3,4,5,'x']中删除x
a = [1,0,x,x,3,4,5,x]
for i in range(a.count('x')):   #range() 函数可创建一个整数列表
    a.remove('x')

5.从列表 [7,1,2,3,4,5,6,7]删除索第5个的元素
a = [7, 1, 2, 3, 4, 5, 6, 7]
a.pop(4)
4
print(a)
[7, 1, 2, 3, 5, 6, 7]

6.建立“0-9”列表，删除列表中索引号为奇数（或偶数）的元素
a = list(range(10))
a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
del a[::2]                         #所有数，每2个取第一个
a
[1, 3, 5, 7, 9]
a = list(range(10))
del a[1::2]                        #所有数，每2个取第二个，同理 a[1::3] 每三个取第二个
a
[0, 2, 4, 6, 8]
重点：向后截取包括自身，像前截取不包括自身。
a[1:]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
a[:1]
[0]

7.列表升降序排列
a = [8, 6, 5, 4, 3, 2, 1, 7]
a.sort()
a
[1, 2, 3, 4, 5, 6, 7, 8]
a.sort(reverse=True)
a
[8, 7, 6, 5, 4, 3, 2, 1]

8.编历列表['b', 'd', 'e', 'c', 'k'], 打印每个元素及其对应索引号
a = ['b', 'd', 'e', 'c', 'k']
for index, value in enumerate(a):        #遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，返回 enumerate(枚举) 对象。
    print('index={}, value={}'.format(index, value))
或   print('index=%s,value=%s'% (index,value)) 
    
index=0, value=b
index=1, value=d
index=2, value=e
index=3, value=c
index=4, value=k

9.若 a = [1,2,3], 令 b = a， 执行b[0] = 9，a[0]亦被改变。为何？如何避免？
a = [1,2,3]
b = a
id(a) == id(b)          #判断对象a 和 b是否使用同一个内存地址
True
b = a.copy()            #copy会新占用一个内存地址
id(a) == id(b)
False

10.以列表形式返回字典的所有键或值
d = {'A': 20, 'B': 28, 'C': 21}
[key for key in d.keys()]
['A', 'B', 'C']
[key for key in d.values()]
[20, 28, 21]

11.去除列表[1,2,4,5,2,3,1,'x',3,'x']中重复的元素
   找出'runoob'，'google'中重复的元素
a = [1,2,4,5,2,3,1,'x',3,'x']
list(set(a))         #设定设定成一个无序不重复元素集，可计算交集、差集、并集等
[1, 2, 3, 4, 5, 'x']
>>>x = set('runoob')
>>> y = set('google')
>>> x, y
(set(['b', 'r', 'u', 'o', 'n']), set(['e', 'o', 'g', 'l']))   # 重复的被删除
>>> x & y         # 交集
set(['o'])
>>> x | y         # 并集
set(['b', 'e', 'g', 'l', 'o', 'n', 'r', 'u'])
>>> x - y         # 差集
set(['r', 'b', 'u', 'n'])
>>>

12.将列表['ha','hello','fine thanks']中三个英文字符串分行打印，实现左对其 或 居中对其
a = ['ha','hello','fine thanks']
len_max = max(len(item) for item in a)   #取最长字符串长度
for item in a:
    print('"%s"' % item.ljust(len_max))     #按多长打印一个字符串，ljust左对其
    
"ha         "
"hello      "
"fine thanks"
for item in a:
    print('%s' % item.center(len_max))
    
     ha    
   hello   
fine thanks

13.写个打印手机号函数，按3，4，4位数打印
>>> def print_mobile():
...     num = input('请输入手机号码: ')
...     print('Mobile: %s %s %s'%(num[:3], num[3:7], num[7:]))
... 
>>> print_mobile()
请输入手机号码: 12345678901
Mobile: 123 4567 8901

14.查看列表[0 , 1 , 'x' , None , '' , list() , {2:1} ]各元素的布尔值（True, False）
 [bool(item) for item in [0 , 1 , 'x' , None , '' , list() , {2:1} ]]
[False, True, True, False, False, False, True]

15.将列表[3,'a',5.2,{},9,[]]中大于3的整数或浮点数设置为1， 其余设置为0.
[1 if isinstance(item,(int,float)) and item>3 else 0 for item in [3,'a',5.2,{},9,[]]]
[0, 0, 1, 0, 1, 0]

16.统计列表[8,5,2,4,3,5,6,3,8,2,1,2]中出现次数最多的数，并且统计出现次数
a = [8,5,2,4,3,5,6,3,8,2,1,2]
v_max = max(set(a),key=a.count)
v_max
2
a.count(v_max)
3

17.将等长的键列表['a','b','c']和值列表[3,4,5]转换为字典
keys = ['a','b','c']
values = [3,4,5]
dict(zip(keys,values))
{'a': 3, 'b': 4, 'c': 5}

18.生成随机小数列表（5个元素）并求和，四舍五入保留两位小数
import random
a = [random.random() for i in range(5)]
a
[0.47738119739071194, 0.49705610699799085, 0.8269865592130041, 0.6208237162763308, 0.01495901666210575]
sum(a)
2.4372065965401433
round(sum(a), 2)
2.44
#range() 
#Python 2.x 返回列表。
#Python 3.x 返回可迭代对象。
#Python3 list() 函数是对象迭代器,所以list(range(5))返回列表。
#round()
#返回浮点数x的四舍五入值
[round(_,2) for _ in a ]
[0.48, 0.5, 0.83, 0.62, 0.01]

19.判断两个对象在内存中是否同一个
a = [1,2,3]
b = a
id(a) == id(b)
True

20.对两个列表相同位置的数据求和
[_ for _ in map(lambda x, y: x +y, [1,2,3,4], [2,4,6,7])]
[3, 6, 9, 11]
#map 
#Python 2.x 返回列表。
#Python 3.x 返回迭代器。
