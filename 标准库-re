#!/usr/bin/python3
#-*-coding:utf-8-*-

## 总结
## ^ 匹配字符串的开始。
## $ 匹配字符串的结尾。
## \b 匹配一个单词的边界。
## \d 匹配任意数字。
## \D 匹配任意非数字字符。
## x? 匹配一个可选的 x 字符 (换言之，它匹配 1 次或者 0 次 x 字符)。
## x* 匹配0次或者多次 x 字符。
## x+ 匹配1次或者多次 x 字符。
## x{n,m} 匹配 x 字符，至少 n 次，至多 m 次。
## (a|b|c) 要么匹配 a，要么匹配 b，要么匹配 c。
## (x) 一般情况下表示一个记忆组 (remembered group)。你可以利用 re.search 函数返回对象的 groups() 函数获取它的值。
## 正则表达式中的点号通常意味着 “匹配任意单字符”


import re

#re.search(pattern, text) 查到第一个后结束
pattern = 'this'
text = 'Does this text match the pattern?'

match = re.search(pattern, text)

s = match.start()
e = match.end()

print('Found "{}"\nin "{}"\nfrom {} to {} ("{}")'.format(
    match.re.pattern, match.string, s, e, text[s:e]))

return:
Found "this"
in "Does this text match the pattern?"
from 5 to 9 ("this")
=======================================================================
# re.compile(p)全文匹配
regexes = [
    re.compile(p)
    for p in ['this', 'that']
]
text = 'Does this text match the pattern?'

print('Text: {!r}\n'.format(text))

for regex in regexes:
    print('Seeking "{}" ->'.format(regex.pattern),
          end=' ')                                #这个end取下面的结果，值得学习

    if regex.search(text):
        print('match!')
    else:
        print('no match')

 =======================================================================     
    image_size = input('please input the lun size __G: ')
    re.search(r'(\d+(\.)?\d+)(\w+)?', image_size).group(1)
    
        ('NUMBER',   r'\d+(\.\d*)?'),  # Integer or decimal number
        ('ASSIGN',   r':='),           # Assignment operator
        ('END',      r';'),            # Statement terminator
        ('ID',       r'[A-Za-z]+'),    # Identifiers
        ('OP',       r'[+\-*/]'),      # Arithmetic operators
        ('NEWLINE',  r'\n'),           # Line endings
        ('SKIP',     r'[ \t]+'),       # Skip over spaces and tabs
        ('MISMATCH', r'.'),            # Any other character
 =======================================================================
from __future__ import division
import re
import math
from decimal import Decimal
from decimal import getcontext


def align_value(value, factor=1024):
    """
    Value will be factored to the mentioned number.

    :param value: value to be checked or changed to factor
    :param factor: value used for align
    :return: aligned value
    """
    return int(math.ceil(float(value) / factor) * factor)


def format_size_human_readable(value, binary=False, precision='%.2f'):
    """
    Format a number of bytesize to a human readable filesize.

    By default,decimal suffixes and base:10**3 will be used.
    :param binary: use binary suffixes (KiB, MiB) and use 2*10 as base
    :param precision: format string to specify precision for float
    """
    suffixes = {
        'decimal': ('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'),
        'binary': ('B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')
    }
    suffix = suffixes['binary'] if binary else suffixes['decimal']
    base = 1024 if binary else 1000

    value = float(value)
    for i, s in enumerate(suffix):
        unit = base ** (i + 1)
        if value < unit:
            break
    value = value * base / unit
    format_str = ('%d' if value.is_integer() else precision) + ' %s'
    return format_str % (value, s)


def normalize_data_size(value_str, order_magnitude="M", factor=1024):
    """
    Normalize a data size in one order of magnitude to another.

    :param value_str: a string include the data default unit is 'B'
    :param order_magnitude: the magnitude order of result
    :param factor: int, the factor between two relative order of magnitude.
                   Normally could be 1024 or 1000
    :return normalized data size string
    """
    def _get_unit_index(m):
        try:
            return ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'].index(
                m.upper())
        except ValueError:
            pass
        return 0

    def _trim_tailling_zeros(num_str):
        # remove tailing zeros, convert float number str to int str
        if '.' in num_str:
            num_str = num_str.rstrip('0').rstrip('.')
        return num_str

    regex = r"(\d+\.?\d*)\s*(\w?)"
    match = re.search(regex, value_str)
    try:
        value = match.group(1)
        unit = match.group(2)
        if not unit:
            unit = 'B'
    except TypeError:
        raise ValueError("Invalid data size format 'value_str=%s'" % value_str)

    getcontext().prec = 20
    from_index = _get_unit_index(unit)
    to_index = _get_unit_index(order_magnitude)
    if from_index - to_index >= 0:
        d = Decimal(value) * Decimal(factor ** (from_index - to_index))
    else:
        d = Decimal(value) / Decimal(factor ** (to_index - from_index))
    return _trim_tailling_zeros('{:f}'.format(d))
